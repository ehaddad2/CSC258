ThreadPool Constructor:
When ThreadPool pool(4); is called in the main function, a ThreadPool object named pool is created with 4 worker threads.
The constructor of the ThreadPool class initializes the thread pool by creating worker threads and starts their execution.

Enqueuing Tasks:
Inside the for loop in the main function, tasks are enqueued for execution by the thread pool using the enqueue method.
Each task is represented by a lambda function that prints a message indicating the task number and the ID of the thread executing the task. It also simulates some work by sleeping for 100 milliseconds.

Task Execution:
Each worker thread in the thread pool executes an infinite loop (while (true)) where it continuously waits for tasks to be enqueued.
When a task is enqueued, the thread dequeues the task from the task queue, unlocks the queue mutex, and executes the task.
After executing the task, the thread goes back to waiting for more tasks to be enqueued.

Task Completion:
Each task is executed asynchronously by one of the worker threads in the thread pool.
As tasks complete execution, the worker threads return to the task queue and wait for more tasks to be enqueued.

ThreadPool Destructor:
When the main function exits, the destructor of the ThreadPool object pool is called.
The destructor stops the thread pool by setting the stop_ flag to true and notifying all threads to wake up from their wait states.
Then, it joins all worker threads to ensure they have completed their tasks before the ThreadPool object is destroyed.
